<table class="list issues odd-even">
  <thead>
    <tr>
      <th class="checkbox"><input type="checkbox" class="check-issue" id="checkAll"/></th>
      <th>Assigned to</th>
      <th>Issue id</th>
      <th>Project name</th>
      <th>Hours</th>
      <th>Coefficient</th>
    </tr>
  </thead>
  <tbody class="table-content">
    <% index = 0 %>
    <% @issues.zip(@times).each do |issue, time| %>
    <% if time.abs > 1e-2 %>
    <tr class="<%= index % 2 == 0 ? 'even' : 'odd' %> issue">
      <td class="checkbox"><input type="checkbox" class="check-issue"/></td>
      <td><%= issue.assigned_to %></td>
      <td><%= issue.id %></td>
      <td><%= issue.project.name %></td>
      <td contenteditable='true' class="editable-cell"><%= time %></td>
      <td contenteditable='true' class="editable-cell"><%= 1 %></td>
    </tr>
    <% index += 1 %>
    <% end %>
    <% end %>
    <tr class="<%= index % 2 == 0 ? 'even' : 'odd' %>">
      <td colspan="4"></td>
      <td><b>Total money:<b></td>
      <td id="money-sum">$0.0</td>
    </tr>
  </tbody>
</table>

<button type="submit" class="create-report">Create report</button>

<script>
  $( document ).ready(function() {
    $('button.create-report').click(function () {
      const entries = getIssues();
      redirectPost("<%= salary_reports_url %>", { entries: entries });
    });
    $("#checkAll").click(function(){
        $('.check-issue').not(this).prop('checked', this.checked)
                         .parents('.issue')
                         .toggleClass('context-menu-selection', this.checked);
        recalculateSum();
    });
    $('.check-issue').click(function(){
      $(this).parents('.issue').toggleClass('context-menu-selection');
    });
  });
  function getIssues() {
    const issues = document.getElementsByClassName("issue");
    const entries = Array.prototype.slice.call( issues )
                        .filter(line => line.cells[0].firstChild.checked)
                        .map(issue => {
      return {
        issue_id: issue.cells[2].textContent,
        hours: issue.cells[4].textContent,
        coefficient: issue.cells[5].textContent,
      };
    });
    return entries;
  }
  function redirectPost(url, data) {
    var form = document.createElement('form');
    document.body.appendChild(form);
    form.method = 'post';
    form.action = url;
    for (let name in data['entries']) {
      const object = data['entries'][name];
      if(object.hours == 0)continue;
        for(value in object){
          var input = document.createElement('input');
          input.type = 'hidden';
          input.name = 'entries[][' + value + ']';
          input.value = object[value];
          form.appendChild(input);
        }
    }
    form.submit();
  }
  function recalculateSum() {
    let sum = 0.0;
    const issues = getIssues();
    for(let issue of issues){
      if(!isNaN(issue.hours) && !isNaN(issue.coefficient)){
        sum += parseFloat(issue.hours) * parseFloat(issue.coefficient);
      }
    }
    var result = Math.round(sum * 100) / 100;
    document.getElementById('money-sum').textContent = "$" + result;
  }
  const cells = document.getElementsByClassName("editable-cell");
  for(let cell of cells){
    cell.addEventListener("input", recalculateSum);
  }
</script>

<style>
.create-report {
  float: right;
}
</style>

<%= context_menu %>
